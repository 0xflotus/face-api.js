{"version":3,"sources":["webpack:///./src/components/FaceClassificationToggleControls.tsx","webpack:///./src/pages/face_classification.tsx"],"names":["Checkbox","label","isActive","onChange","Container","styled","div","FaceClassificationToggleControls","useState","withFaceLandmarks","setWithFaceLandmarks","withFaceExpressions","setWithFaceExpressions","withAgeAndGender","setWithAgeAndGender","withShowBoxes","setWithShowBoxes","withShowFaceLandmarks","setWithShowFaceLandmarks","getState","onChangeWithFaceLandmarks","onChangeWithFaceExpressions","onChangeWithAgeAndGender","onChangeWithShowBoxes","onChangeWithShowFaceLandmarks","processFaceClassificationInputs","pageState","mediaElement","overlay","isFaceDetectorLoaded","areModelsLoaded","faceDetectionOptions","element","faceDetectionTask","faceapi","composedTask","classificationTask","detectionsAndLandmarks","classificationResults","dimensions","HTMLVideoElement","forEach","res","drawFaceLandmarks","landmarks","drawDetections","alignedRect","text","gender","genderProbability","push","age","expressions","asSortedArray","expression","expressionProbability","probability","length","detection","box","DrawTextField","bottomLeft","draw","state","loadModels","Promise","all","faceExpressionNet","loadFromUri","MODELS_URI","ageGenderNet","processInputs","render","options","setState","React"],"mappings":"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","file":"component---src-pages-face-classification-tsx-829243471cd14f757862.js","sourcesContent":["import * as Mui from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { SideBySide } from './styled/SideBySide';\r\nimport styled from 'styled-components';\r\n\r\nexport type CheckboxProps = {\r\n  label: string\r\n  isActive: boolean\r\n  onChange: () => any\r\n}\r\n\r\nconst Checkbox = ({ label, isActive, onChange }: CheckboxProps) =>\r\n  <Mui.FormControlLabel\r\n    control={\r\n      <Mui.Checkbox\r\n        checked={isActive}\r\n        onChange={onChange}\r\n        color=\"primary\"\r\n      />\r\n    }\r\n    label={ label }\r\n  />\r\n\r\nconst Container = styled.div`\r\n  margin: 10px;\r\n`\r\n\r\nexport type FaceClassificationOptions = {\r\n  withFaceLandmarks: boolean\r\n  withFaceExpressions: boolean\r\n  withAgeAndGender: boolean\r\n  withShowBoxes: boolean\r\n  withShowFaceLandmarks: boolean\r\n}\r\n\r\nexport type FaceClassificationToggleControlsProps = {\r\n  onChange: (options: FaceClassificationOptions) => any\r\n}\r\n\r\nexport function FaceClassificationToggleControls({ onChange }: FaceClassificationToggleControlsProps) {\r\n  const [withFaceLandmarks, setWithFaceLandmarks] = useState(false)\r\n  const [withFaceExpressions, setWithFaceExpressions] = useState(false)\r\n  const [withAgeAndGender, setWithAgeAndGender] = useState(false)\r\n  const [withShowBoxes, setWithShowBoxes] = useState(true)\r\n  const [withShowFaceLandmarks, setWithShowFaceLandmarks] = useState(true)\r\n\r\n  function getState(): FaceClassificationOptions {\r\n    return {\r\n      withFaceLandmarks,\r\n      withFaceExpressions,\r\n      withAgeAndGender,\r\n      withShowBoxes,\r\n      withShowFaceLandmarks\r\n    }\r\n  }\r\n\r\n  function onChangeWithFaceLandmarks() {\r\n    setWithFaceLandmarks(!withFaceLandmarks)\r\n    onChange({ ...getState(), withFaceLandmarks: !withFaceLandmarks })\r\n  }\r\n\r\n  function onChangeWithFaceExpressions() {\r\n    setWithFaceExpressions(!withFaceExpressions)\r\n    onChange({ ...getState(), withFaceExpressions: !withFaceExpressions })\r\n  }\r\n\r\n  function onChangeWithAgeAndGender() {\r\n    setWithAgeAndGender(!withAgeAndGender)\r\n    onChange({ ...getState(), withAgeAndGender: !withAgeAndGender })\r\n  }\r\n\r\n  function onChangeWithShowBoxes() {\r\n    setWithShowBoxes(!withShowBoxes)\r\n    onChange({ ...getState(), withShowBoxes: !withShowBoxes })\r\n  }\r\n\r\n  function onChangeWithShowFaceLandmarks() {\r\n    setWithShowFaceLandmarks(!withShowFaceLandmarks)\r\n    onChange({ ...getState(), withShowFaceLandmarks: !withShowFaceLandmarks })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SideBySide>\r\n        <Checkbox\r\n          label=\"Face Landmarks\"\r\n          isActive={withFaceLandmarks}\r\n          onChange={onChangeWithFaceLandmarks}\r\n        />\r\n        <Checkbox\r\n          label=\"Face Expressions\"\r\n          isActive={withFaceExpressions}\r\n          onChange={onChangeWithFaceExpressions}\r\n        />\r\n        <Checkbox\r\n          label=\"Age and Gender\"\r\n          isActive={withAgeAndGender}\r\n          onChange={onChangeWithAgeAndGender}\r\n        />\r\n      </SideBySide>\r\n      <SideBySide>\r\n        <Checkbox\r\n          label=\"Show Boxes\"\r\n          isActive={withShowBoxes}\r\n          onChange={onChangeWithShowBoxes}\r\n        />\r\n        <Checkbox\r\n          label=\"Show Face Landmarks\"\r\n          isActive={withShowFaceLandmarks}\r\n          onChange={onChangeWithShowFaceLandmarks}\r\n        />\r\n      </SideBySide>\r\n    </Container>\r\n  )\r\n}","import * as faceapi from 'face-api.js';\r\nimport * as React from 'react';\r\n\r\nimport { FaceClassificationOptions, FaceClassificationToggleControls } from '../components/FaceClassificationToggleControls';\r\nimport { MODELS_URI } from '../const';\r\nimport { BasePage, BasePageState } from '../container/BasePage';\r\n\r\nexport type PageState = FaceClassificationOptions\r\n\r\nexport async function processFaceClassificationInputs(pageState: PageState & BasePageState) {\r\n  const {\r\n    mediaElement,\r\n    overlay,\r\n    isFaceDetectorLoaded,\r\n    areModelsLoaded,\r\n    faceDetectionOptions,\r\n    withFaceLandmarks,\r\n    withFaceExpressions,\r\n    withAgeAndGender,\r\n    withShowBoxes,\r\n    withShowFaceLandmarks\r\n  } = pageState\r\n\r\n  if (!mediaElement || !overlay || !isFaceDetectorLoaded || !areModelsLoaded) {\r\n    return\r\n  }\r\n\r\n  const { element } = mediaElement\r\n\r\n  const faceDetectionTask = faceapi.detectAllFaces(element, faceDetectionOptions)\r\n  const composedTask = withFaceLandmarks ? faceDetectionTask.withFaceLandmarks() : faceDetectionTask\r\n  const classificationTask = (withFaceExpressions && withAgeAndGender)\r\n    ? composedTask.withFaceExpressions().withAgeAndGender()\r\n    : (withFaceExpressions\r\n      ? composedTask.withFaceExpressions().withAgeAndGender()\r\n      : (withAgeAndGender\r\n        ? composedTask.withAgeAndGender()\r\n        : null\r\n      )\r\n    )\r\n\r\n  const detectionsAndLandmarks = await composedTask\r\n  const classificationResults = classificationTask ? await classificationTask : null\r\n\r\n  const dimensions = faceapi.matchDimensions(overlay, overlay, element instanceof HTMLVideoElement)\r\n\r\n  faceapi.resizeResults(detectionsAndLandmarks, dimensions).forEach((res: any) => {\r\n    if (faceapi.isWithFaceLandmarks(res) && withShowFaceLandmarks) {\r\n      faceapi.draw.drawFaceLandmarks(overlay, res.landmarks)\r\n    }\r\n\r\n    if (withShowBoxes) {\r\n      if (faceapi.isWithFaceLandmarks(res)) {\r\n        faceapi.draw.drawDetections(overlay, res.alignedRect)\r\n      } else {\r\n        faceapi.draw.drawDetections(overlay, res)\r\n      }\r\n\r\n    }\r\n  })\r\n\r\n  if (classificationResults) {\r\n    faceapi.resizeResults(classificationResults, dimensions).forEach(res => {\r\n      const text: string[] = []\r\n\r\n      // TODO faceapi.isWithAgeAndGender(res)\r\n      if (withAgeAndGender) {\r\n        const { gender, genderProbability } = res\r\n        text.push(`${faceapi.round(res.age, 0)} years`)\r\n        text.push(`${gender} (${faceapi.round(genderProbability)})`)\r\n      }\r\n      if (faceapi.isWithFaceExpressions(res)) {\r\n        const { expression, probability: expressionProbability } = res.expressions.asSortedArray()[0]\r\n        text.push(`${expression} (${faceapi.round(expressionProbability)})`)\r\n      }\r\n\r\n      if (text.length) {\r\n        const { box } = faceapi.isWithFaceLandmarks(res) ? res.alignedRect : res.detection\r\n        new faceapi.draw.DrawTextField(text, box.bottomLeft).draw(overlay)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default class extends React.Component<{}, PageState> {\r\n  state = {\r\n    withFaceLandmarks: false,\r\n    withFaceExpressions: false,\r\n    withAgeAndGender: false,\r\n    withShowBoxes: true,\r\n    withShowFaceLandmarks: true\r\n  }\r\n\r\n  loadModels = async() => {\r\n    await Promise.all([\r\n      faceapi.nets.faceExpressionNet.loadFromUri(MODELS_URI),\r\n      faceapi.nets.ageGenderNet.loadFromUri(MODELS_URI)\r\n    ])\r\n  }\r\n\r\n  processInputs = async(state: BasePageState) => {\r\n    await processFaceClassificationInputs({ ...state, ...this.state })\r\n  }\r\n\r\n  public render() {\r\n    return(\r\n      <BasePage\r\n        loadAdditionalModels={this.loadModels}\r\n        processInputs={this.processInputs}\r\n        renderControls={() =>\r\n          <FaceClassificationToggleControls\r\n            onChange={options => this.setState(options)}\r\n          />\r\n        }\r\n      />\r\n    )\r\n  }\r\n}"],"sourceRoot":""}