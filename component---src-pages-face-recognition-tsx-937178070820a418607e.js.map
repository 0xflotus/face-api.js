{"version":3,"sources":["webpack:///./src/components/DisplayFullFaceDescriptions.tsx","webpack:///./src/facc/AllFaces.tsx","webpack:///./src/facc/ComputeRefDescriptors.tsx","webpack:///./src/hoc/withAllFaces.tsx","webpack:///./src/pages/face_recognition.tsx"],"names":[],"mappings":"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","file":"component---src-pages-face-recognition-tsx-937178070820a418607e.js","sourcesContent":["import * as faceapi from 'face-api.js';\r\nimport * as React from 'react';\r\n\r\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\r\nimport { DisplayResults } from './DisplayResults';\r\n\r\n\r\nexport interface DisplayFullFaceDescriptionsProps {\r\n  fullFaceDescriptions: faceapi.FullFaceDescription[]\r\n  overlay: HTMLCanvasElement\r\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\r\n  withScore?: boolean\r\n  drawLandmarks?: boolean\r\n}\r\n\r\nexport const DisplayFullFaceDescriptions = (props: DisplayFullFaceDescriptionsProps): any => {\r\n\r\n  const { fullFaceDescriptions, overlay, withScore, drawLandmarks, getBestMatch } = props\r\n\r\n  const faceDetections = fullFaceDescriptions.map(fd => fd.detection)\r\n  const faceLandmarks = drawLandmarks\r\n    ? fullFaceDescriptions.map(fd => fd.landmarks)\r\n    : []\r\n  const bestMatches = fullFaceDescriptions.map(fd => getBestMatch(fd.descriptor))\r\n\r\n  const displayResultsProps = {\r\n    overlay,\r\n    withScore,\r\n    faceDetections,\r\n    faceLandmarks,\r\n    bestMatches\r\n  }\r\n\r\n  return <DisplayResults {...displayResultsProps} />\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/DisplayFullFaceDescriptions.tsx","import * as faceapi from 'face-api.js';\n\nimport { withAllFaces } from '../hoc/withAllFaces';\n\nexport type DetectionParams = {\n  minConfidence: number\n}\n\nexport const AllFaces = withAllFaces<DetectionParams>(\n  (img: HTMLImageElement, detectionParams: DetectionParams) => faceapi.allFaces(img, detectionParams.minConfidence)\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/AllFaces.tsx","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { ModalLoader } from '../components/ModalLoader';\nimport { withAsyncRendering } from '../hoc/withAsyncRendering';\n\nexport type RefDescriptor = {\n  label: string,\n  descriptor: Float32Array\n}\n\nexport type BestMatch = {\n  label: string,\n  distance: number\n}\n\nexport interface ComputeRefDescriptorsProps {\n  faceRecognitionNet: faceapi.FaceRecognitionNet\n  refDataSources: {\n    label: string,\n    url: string\n  }[]\n}\n\nexport interface ComputeRefDescriptorsState {\n  refDescriptors?: RefDescriptor[]\n  getBestMatch?: (queryDescriptor: Float32Array) => BestMatch\n}\n\nasync function initRefDescriptors(props: ComputeRefDescriptorsProps) {\n  const refDescriptors = await Promise.all(\n    props.refDataSources.map(async ({ label, url }) => {\n      const img = await faceapi.bufferToImage(await (await fetch(url)).blob())\n      const descriptor = await props.faceRecognitionNet.computeFaceDescriptor(img) as Float32Array\n      return {\n        label: label.replace('1.png', ''),\n        descriptor\n      }\n    })\n  )\n\n  const getBestMatch = (queryDescriptor: Float32Array) =>\n    refDescriptors.map(ref => ({\n      label: ref.label,\n      distance: faceapi.euclideanDistance(ref.descriptor, queryDescriptor)\n    }))\n      .reduce((best, curr) => curr.distance < best.distance ? curr : best)\n\n  return {\n    refDescriptors,\n    getBestMatch\n  }\n}\n\nexport const ComputeRefDescriptors = withAsyncRendering<ComputeRefDescriptorsProps, ComputeRefDescriptorsState>(\n  initRefDescriptors,\n  () => <ModalLoader title=\"Computing Reference Descriptors\"/>\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/ComputeRefDescriptors.tsx","import * as faceapi from 'face-api.js';\n\nimport { ImageWrap } from '../ImageWrap';\nimport { withAsyncRendering } from './withAsyncRendering';\nimport { ModalLoader } from '../components/ModalLoader';\nimport * as React from 'react';\n\nexport interface WithAllFacesProps {\n  img: ImageWrap\n}\n\nexport interface WithAllFacesState {\n  fullFaceDescriptions?: faceapi.FullFaceDescription[]\n}\n\ntype Props<DetectionParams> = WithAllFacesProps & {\n  detectionParams: DetectionParams\n}\n\nexport const withAllFaces = <DetectionParams extends {}> (\n  allFacesFunction: (img: HTMLImageElement | HTMLCanvasElement, params: DetectionParams) => Promise<faceapi.FullFaceDescription[]>\n) => {\n  async function allFaces(props: Props<DetectionParams>) {\n    const fullFaceDescriptions = await allFacesFunction(props.img.img, props.detectionParams)\n\n    return {\n      fullFaceDescriptions\n    }\n  }\n\n  return withAsyncRendering<Props<DetectionParams>, WithAllFacesState>(\n    allFaces,\n    () => <ModalLoader title=\"Detecting Faces\"/>\n  )\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hoc/withAllFaces.tsx","import * as React from 'react';\n\nimport { DisplayFullFaceDescriptions } from '../components/DisplayFullFaceDescriptions';\nimport { SelectableImage } from '../components/SelectableImage';\nimport { ALIGNED_FACE_IMAGES_BY_CLASS, EXAMPLE_IMAGES } from '../const';\nimport { AllFaces } from '../facc/AllFaces';\nimport { ComputeRefDescriptors } from '../facc/ComputeRefDescriptors';\nimport { LoadModels } from '../facc/LoadModels';\nimport { ImageWrap } from '../ImageWrap';\nimport { Root } from '../Root';\n\ntype FaceRecognitionPageState = {\n  inputImg: ImageWrap\n  minDetectionScore: number\n  overlay?: HTMLCanvasElement\n}\n\nconst REF_DATA_SOURCES = ALIGNED_FACE_IMAGES_BY_CLASS.map(srcsByClass => srcsByClass[0])\n\nexport default class extends React.Component<{}, FaceRecognitionPageState> {\n\n  state: FaceRecognitionPageState = {\n    inputImg: new ImageWrap(EXAMPLE_IMAGES[0].url),\n    minDetectionScore: 0.5\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={this.state.inputImg.imageSrc}\n          onLoaded={({ img: inputImg, overlay }) => this.setState({ inputImg, overlay })}\n          maxImageWidth={800}\n        />\n        <LoadModels\n          faceDetectionModelUrl={'/models'}\n          faceLandmarkModelUrl={'/models'}\n          faceRecognitionModelUrl={'/models'}\n        >\n        {\n          ({ faceRecognitionNet }) =>\n            <ComputeRefDescriptors\n              faceRecognitionNet={faceRecognitionNet}\n              refDataSources={REF_DATA_SOURCES}\n            >\n            {\n              ({ getBestMatch }) =>\n                <AllFaces\n                  img={this.state.inputImg}\n                  detectionParams={{\n                    minConfidence: this.state.minDetectionScore\n                  }}\n                >\n                {\n                  ({ fullFaceDescriptions }) =>\n                    <DisplayFullFaceDescriptions\n                      fullFaceDescriptions={fullFaceDescriptions}\n                      overlay={this.state.overlay}\n                      getBestMatch={getBestMatch}\n                      withScore\n                    />\n                }\n                </AllFaces>\n            }\n            </ComputeRefDescriptors>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/face_recognition.tsx"],"sourceRoot":""}