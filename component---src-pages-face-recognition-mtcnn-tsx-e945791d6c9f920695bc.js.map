{"version":3,"sources":["webpack:///./src/components/AdjustableInput.tsx?a801","webpack:///./src/components/DisplayFullFaceDescriptions.tsx?c963","webpack:///./src/facc/AllFacesMtcnn.tsx","webpack:///./src/facc/ComputeRefDescriptors.tsx?f8f0","webpack:///./src/hoc/withAllFaces.tsx?cc82","webpack:///./src/pages/face_recognition_mtcnn.tsx","webpack:///./src/styled/SideBySide.tsx?53cb"],"names":[],"mappings":"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","file":"component---src-pages-face-recognition-mtcnn-tsx-e945791d6c9f920695bc.js","sourcesContent":["import { Button, FormControl, Input, InputLabel } from '@material-ui/core';\r\nimport * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { SideBySide } from '../styled/SideBySide';\r\n\r\nexport const StyledButton = styled(Button)`\r\n  width: 40px;\r\n  height: 40px;\r\n`\r\n\r\nexport type AdjustableInputProps = {\r\n  inputId: string\r\n  label: string\r\n  value: number\r\n  minValue: number\r\n  maxValue: number\r\n  step: number\r\n  onChange: (newValue: number) => any\r\n}\r\n\r\nexport const AdjustableInput = (props: AdjustableInputProps) =>\r\n  <FormControl>\r\n    <SideBySide>\r\n      <InputLabel htmlFor={props.inputId}>\r\n        { props.label }\r\n      </InputLabel>\r\n      <Input\r\n        id={props.inputId}\r\n        value={props.value}\r\n      />\r\n      <StyledButton\r\n        variant=\"outlined\"\r\n        onClick={\r\n          () => props.onChange(Math.max(props.value - props.step, props.minValue))\r\n        }\r\n      >\r\n        -\r\n      </StyledButton>\r\n      <StyledButton\r\n        variant=\"outlined\"\r\n        onClick={\r\n          () => props.onChange(Math.min(props.value + props.step, props.maxValue))\r\n        }\r\n      >\r\n        +\r\n      </StyledButton>\r\n    </SideBySide>\r\n  </FormControl>\n\n\n// WEBPACK FOOTER //\n// ./src/components/AdjustableInput.tsx","import * as faceapi from 'face-api.js';\r\n\r\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\r\n\r\n\r\nexport interface DisplayFullFaceDescriptionsProps {\r\n  fullFaceDescriptions: faceapi.FullFaceDescription[] | null\r\n  overlay: HTMLCanvasElement | null\r\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\r\n  withScore?: boolean\r\n  drawLandmarks?: boolean\r\n}\r\n\r\nexport const DisplayFullFaceDescriptions = (props: DisplayFullFaceDescriptionsProps): any => {\r\n  const { overlay, fullFaceDescriptions } = props\r\n  if (!fullFaceDescriptions || !overlay) {\r\n    return null\r\n  }\r\n\r\n  const { width, height } = overlay\r\n  overlay.getContext('2d').clearRect(0, 0, width, height)\r\n\r\n  const faceDetections = fullFaceDescriptions.map(fd => fd.detection.forSize(width, height))\r\n\r\n  faceapi.drawDetection(overlay, faceDetections, { withScore: props.withScore })\r\n\r\n  if (props.drawLandmarks) {\r\n    faceapi.drawLandmarks(\r\n      overlay,\r\n      fullFaceDescriptions.map(fd => fd.landmarks.forSize(width, height)),\r\n      { color: 'red', drawLines: true, lineWidth: 4 }\r\n    )\r\n  }\r\n\r\n  fullFaceDescriptions.forEach(({ detection, descriptor }) => {\r\n    const bestMatch = props.getBestMatch(descriptor)\r\n    const text = `${bestMatch.distance < 0.6 ? bestMatch.label : 'unknown'} (${faceapi.round(bestMatch.distance)})`\r\n    const { x, y, height: boxHeight } = detection.forSize(width, height).getBox()\r\n    faceapi.drawText(\r\n      overlay.getContext('2d'),\r\n      x,\r\n      y + boxHeight,\r\n      text,\r\n      Object.assign(faceapi.getDefaultDrawOptions(), { color: 'red', fontSize: 16 })\r\n    )\r\n  })\r\n  return null\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/DisplayFullFaceDescriptions.tsx","import * as faceapi from 'face-api.js';\n\nimport { MtcnnForwardParams } from '../../node_modules/face-api.js/build/mtcnn/types';\nimport { withAllFaces } from '../hoc/withAllFaces';\n\n// TODO: export faceapi.MtcnnForwardParams\nexport type DetectionParams = MtcnnForwardParams\n\nexport const AllFacesMtcnn = withAllFaces<DetectionParams>(\n  (img: HTMLImageElement, detectionParams: DetectionParams) => faceapi.allFacesMtcnn(img, detectionParams)\n)\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/AllFacesMtcnn.tsx","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { ModalLoader } from '../components/ModalLoader';\n\nexport type RefDescriptor = {\n  label: string,\n  descriptor: Float32Array\n}\n\nexport type BestMatch = {\n  label: string,\n  distance: number\n}\n\nexport interface ComputeRefDescriptorsProps {\n  faceRecognitionNet: faceapi.FaceRecognitionNet\n  refDataSources: {\n    label: string,\n    url: string\n  }[]\n  children: (\n    getBestMatch: (queryDescriptor: Float32Array) => BestMatch | null,\n    refDescriptors: RefDescriptor[] | null\n  ) => React.Component | JSX.Element\n}\n\nexport interface ComputeRefDescriptorsState {\n  refDescriptors: RefDescriptor[] | null,\n  isBusy: boolean\n}\n\nexport class ComputeRefDescriptors extends React.Component<ComputeRefDescriptorsProps, ComputeRefDescriptorsState> {\n\n    state: ComputeRefDescriptorsState = {\n      refDescriptors: null,\n      isBusy: true\n    }\n\n    async initRefDescriptors() {\n      const refDescriptors = await Promise.all(\n        this.props.refDataSources.map(async ({ label, url }) => {\n          const img = await faceapi.bufferToImage(await (await fetch(url)).blob())\n          const descriptor = await this.props.faceRecognitionNet.computeFaceDescriptor(img) as Float32Array\n          return {\n            label: label.replace('1.png', ''),\n            descriptor\n          }\n        })\n      )\n\n      this.setState({\n        refDescriptors,\n        isBusy: false\n      })\n    }\n\n    componentDidMount() {\n      this.initRefDescriptors()\n    }\n\n    render() {\n      if (this.state.isBusy) {\n        return <ModalLoader title=\"Computing Reference Descriptors\" />\n      }\n\n      const getBestMatch = (queryDescriptor: Float32Array) =>\n        this.state.refDescriptors.map(ref => ({\n          label: ref.label,\n          distance: faceapi.euclideanDistance(ref.descriptor, queryDescriptor)\n        }))\n          .reduce((best, curr) => curr.distance < best.distance ? curr : best)\n\n      return this.props.children(getBestMatch, this.state.refDescriptors)\n    }\n  }\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/ComputeRefDescriptors.tsx","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { ImageWrap } from '../ImageWrap';\n\nexport interface WithAllFacesProps {\n  img: ImageWrap\n  children: (fullFaceDescriptions: faceapi.FullFaceDescription[] | null) => React.Component | JSX.Element\n}\n\nexport interface WithAllFacesState {\n  fullFaceDescriptions: faceapi.FullFaceDescription[] | null\n}\n\ntype Props<DetectionParams> = WithAllFacesProps & {\n  detectionParams: DetectionParams\n}\n\nexport const withAllFaces = <DetectionParams extends {}> (\n  allFaces: (img: HTMLImageElement, params: DetectionParams) => Promise<faceapi.FullFaceDescription[]>\n) =>\n\n  class extends React.Component<WithAllFacesProps & Props<DetectionParams>, WithAllFacesState> {\n\n    state: WithAllFacesState = {\n      fullFaceDescriptions: null\n    }\n\n    async detectFaces() {\n      if (!this.props.img.isLoaded) {\n        return\n      }\n      const fullFaceDescriptions = await allFaces(this.props.img.img, this.props.detectionParams)\n\n      this.setState({\n        fullFaceDescriptions\n      })\n    }\n\n    componentDidUpdate(prevProps: Props<DetectionParams>) {\n      if (\n        this.props.detectionParams !== prevProps.detectionParams\n          || this.props.img !== prevProps.img\n          || this.props.children !== prevProps.children\n      ) {\n        this.detectFaces()\n      }\n    }\n\n    componentDidMount() {\n      this.detectFaces()\n    }\n\n    render() {\n      return this.props.children(this.state.fullFaceDescriptions)\n    }\n  }\n\n\n\n// WEBPACK FOOTER //\n// ./src/hoc/withAllFaces.tsx","import { withPrefix } from 'gatsby-link';\nimport * as React from 'react';\n\nimport { AdjustableInput } from '../components/AdjustableInput';\nimport { DisplayFullFaceDescriptions } from '../components/DisplayFullFaceDescriptions';\nimport { SelectableImage } from '../components/SelectableImage';\nimport { ALIGNED_FACE_IMAGES_BY_CLASS, EXAMPLE_IMAGES } from '../const';\nimport { AllFacesMtcnn } from '../facc/AllFacesMtcnn';\nimport { ComputeRefDescriptors } from '../facc/ComputeRefDescriptors';\nimport { LoadModels } from '../facc/LoadModels';\nimport { ImageWrap } from '../ImageWrap';\nimport { Root } from '../Root';\n\ntype FaceRecognitionMtcnnPageState = {\n  inputImg: ImageWrap\n  detectionParams: {\n    minFaceSize: number\n  }\n  overlay?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, FaceRecognitionMtcnnPageState> {\n\n  state: FaceRecognitionMtcnnPageState = {\n    inputImg: new ImageWrap(EXAMPLE_IMAGES[0].url),\n    detectionParams: {\n      minFaceSize: 40\n    }\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={this.state.inputImg.imageSrc}\n          onLoaded={({ img: inputImg, overlay }) => this.setState({ inputImg, overlay })}\n          maxImageWidth={800}\n        />\n        <AdjustableInput\n          inputId=\"minFaceSize\"\n          label=\"minFaceSize:\"\n          value={this.state.detectionParams.minFaceSize}\n          minValue={20}\n          maxValue={200}\n          step={20}\n          onChange={\n            (minFaceSize: number) => this.setState({\n              detectionParams: { ...this.state.detectionParams, minFaceSize }\n            })\n          }\n        />\n        <LoadModels\n          mtcnnModelUrl={withPrefix('/models')}\n          faceRecognitionModelUrl={withPrefix('/models')}\n        >\n        {\n          ({ faceRecognitionNet }) =>\n            <ComputeRefDescriptors\n              faceRecognitionNet={faceRecognitionNet}\n              refDataSources={ALIGNED_FACE_IMAGES_BY_CLASS.map(srcsByClass => srcsByClass[0])}\n            >\n            {\n              getBestMatch =>\n                <AllFacesMtcnn\n                  img={this.state.inputImg}\n                  detectionParams={this.state.detectionParams}\n                >\n                {\n                  fullFaceDescriptions =>\n                    <DisplayFullFaceDescriptions\n                      fullFaceDescriptions={fullFaceDescriptions}\n                      overlay={this.state.overlay}\n                      getBestMatch={getBestMatch}\n                      drawLandmarks\n                    />\n                }\n                </AllFacesMtcnn>\n            }\n            </ComputeRefDescriptors>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/face_recognition_mtcnn.tsx","import styled from 'styled-components';\r\n\r\nexport const SideBySide = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n`\n\n\n// WEBPACK FOOTER //\n// ./src/styled/SideBySide.tsx"],"sourceRoot":""}