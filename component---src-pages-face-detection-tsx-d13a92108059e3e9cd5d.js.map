{"version":3,"sources":["webpack:///./src/facc/DetectFaces.tsx","webpack:///./src/pages/face_detection.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,iCAeA;;KAAyB;;;AAAzB;;;;;AAEI,eAAK;AACW,6BAiClB;AAlC4B;;AAkC3B;;2BA9BkB;;AACf,iBAAI,CAAK,KAAM,MAAI,IAAS,UAAE;AACtB;AACP;AAED,iBAAoB,iBAAG,MAAU,KAAM,MAAiB,iBAAY,YAAK,KAAM,MAAI,IAAI,KAAM,KAAM,MAAe;AAE9G,kBAAS;AAGf;AAHgB;AAGf;;;;;;;;;2BAEiB,iDAA4B;AAC5C,aACM,KAAM,MAAiB,qBAAc,UAAiB,oBACjD,KAAM,MAAc,kBAAc,UAAc,iBAChD,KAAM,MAAI,QAAc,UAAI,OAC5B,KAAM,MAAS,aAAc,UAAS,UAC/C;AACI,kBAAc;AAEtB;AAAC;;2BAEgB;AACX,cACN;AAAC;;2BAEK;AACJ,gBAAW,KAAM,MAAS,SAAK,KAAM,MACvC;AACD;;;GApCmC,MAA8C;;AAApF,uBAoCG,Y;;;;;;;;;;;;;;;;ACpDH,mCAAuC;AACvC,yCAAyC;AACzC,iCAA+B;AAE/B,6CAAgE;AAChE,mCAA0C;AAC1C,yCAAkD;AAClD,wCAAgD;AAChD,uCAAyC;AACzC,kCAQA;;KAAqB;;;AAArB;;;;;AAEE,eAAK;AACK,uBAAE,IAAI,YAAS,UAAC,QAAc,eAAG,GAAK;AAC7B,gCA8CrB;AAhDkC;;AAgDjC;;yBA3Cc;;;AACX,aAAK,EAAC,OAAa,WAAgB,eAAU,OAAU,WAAE;AACvD,oBAAW;AACZ;AAEK,oCACH,OAAI,gCACF,kBAAe,mBACT,OAAE,QAAc,gBACN,iBAAM,KAAM,MAAS,SAAS,UACrC;AAAG,qBAAe,gBAAV;qBAAyB;wBAAK,OAAS,SAAC,EAAU,oBAAY;gBACjE,eACb,KALF,uBAMC,aAAU,cAAsB,uBAAE,cAAU,WAAW;AAErD,iBAAwB;wCACtB,cAAW,eACM,kBAAkB,kBAC/B,KAAM,OAAM,MAAS,UACX,eAAM,OAAM,MAAkB,qBAG3C,UAAmB;AACX,qBAAW,UAAO,OAAM;;AAE9B,qBAAW,WAAkB;AACrB,yBAAO,QAAoB;yBAAV;;AAChB,6BAAW,WAAM,MAAU,UAAE,GAAG,GAAO,OAAS;AAChD,6BAAc,cACZ,wBACW;AAAO,gCAAI,IAAQ,QAAM,OAC5C;sBADe;AAEjB;AAED,wBACF;AAOZ,cA1BU;UAHJ,CAPF;AAqCL;;;GAlDiC,MAAsC;;AAAxE,mBAkDC,U","file":"component---src-pages-face-detection-tsx-d13a92108059e3e9cd5d.js","sourcesContent":["import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { ImageWrap } from '../ImageWrap';\n\nexport interface DetectFacesProps {\n  faceDetectionNet: faceapi.FaceDetectionNet\n  img: ImageWrap\n  minConfidence: number\n  children: (faceDetections: faceapi.FaceDetection[] | null) => React.Component | JSX.Element\n}\n\nexport interface DetectFacesState {\n  faceDetections: faceapi.FaceDetection[] | null\n}\n\nexport class DetectFaces extends React.Component<DetectFacesProps, DetectFacesState> {\n\n    state: DetectFacesState = {\n      faceDetections: null\n    }\n\n    async detectFaces() {\n      if (!this.props.img.isLoaded) {\n        return\n      }\n\n      const faceDetections = await this.props.faceDetectionNet.locateFaces(this.props.img.img, this.props.minConfidence)\n\n      this.setState({\n        faceDetections\n      })\n    }\n\n    componentDidUpdate(prevProps: DetectFacesProps) {\n      if (\n        this.props.faceDetectionNet !== prevProps.faceDetectionNet\n          || this.props.minConfidence !== prevProps.minConfidence\n          || this.props.img !== prevProps.img\n          || this.props.children !== prevProps.children\n      ) {\n        this.detectFaces()\n      }\n    }\n\n    componentDidMount() {\n      this.detectFaces()\n    }\n\n    render() {\n      return this.props.children(this.state.faceDetections)\n    }\n  }\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/DetectFaces.tsx","import * as faceapi from 'face-api.js';\nimport { withPrefix } from 'gatsby-link';\nimport * as React from 'react';\n\nimport { SelectableImage } from '../components/SelectableImage';\nimport { EXAMPLE_IMAGES } from '../const';\nimport { DetectFaces } from '../facc/DetectFaces';\nimport { LoadModels } from '../facc/LoadModels';\nimport { ImageWrap } from '../ImageWrap';\nimport { Root } from '../Root';\n\ntype FaceDetectionPageState = {\n  inputImg: ImageWrap\n  minDetectionScore: number\n  overlay?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, FaceDetectionPageState> {\n\n  state: FaceDetectionPageState = {\n    inputImg: new ImageWrap(EXAMPLE_IMAGES[0].url),\n    minDetectionScore: 0.5,\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={this.state.inputImg.imageSrc}\n          onLoaded={({ img: inputImg, overlay }) => this.setState({ inputImg, overlay })}\n          maxImageWidth={800}\n        />\n        <LoadModels faceDetectionModelUrl={withPrefix('/models')}>\n        {\n          ({ faceDetectionNet }) =>\n            <DetectFaces\n              faceDetectionNet={faceDetectionNet}\n              img={this.state.inputImg}\n              minConfidence={this.state.minDetectionScore}\n            >\n            {\n              (faceDetections) => {\n                const { overlay } = this.state\n\n                if (overlay && faceDetections) {\n                  const { width, height } = overlay\n                  overlay.getContext('2d').clearRect(0, 0, width, height)\n                  faceapi.drawDetection(\n                    overlay,\n                    faceDetections.map(det => det.forSize(width, height))\n                  )\n                }\n\n                return null\n              }\n            }\n            </DetectFaces>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/face_detection.tsx"],"sourceRoot":""}