{"version":3,"sources":["webpack:///./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","webpack:///./src/components/DisplayMatches.tsx","webpack:///./src/pages/face_recognition.tsx"],"names":[],"mappings":"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","file":"component---src-pages-face-recognition-tsx-2934105157cb845e0974.js","sourcesContent":["import * as faceapi from 'face-api.js';\n\nimport { withAsyncRendering } from '../hoc/withAsyncRendering';\nimport { MediaElement } from '../MediaElement';\nimport { FullFaceDescription, FaceDetectionOptions } from 'face-api.js';\n\nexport interface DetectFacesWithLandmarksWithDescriptorsProps {\n  detectionOptions: FaceDetectionOptions\n  input?: MediaElement\n}\n\nexport interface DetectFacesWithLandmarksWithDescriptorsState {\n  fullFaceDescriptions?: FullFaceDescription[]\n}\n\nasync function detectFacesWithLandmarksWithDescriptors(props: DetectFacesWithLandmarksWithDescriptorsProps) {\n\n  if (!props.input) {\n    return null\n  }\n\n  return {\n    fullFaceDescriptions: await faceapi.detectAllFaces(props.input.element, props.detectionOptions).withFaceLandmarks().withFaceDescriptors()\n  }\n}\n\nexport const DetectFacesWithLandmarksWithDescriptors =\n  withAsyncRendering<DetectFacesWithLandmarksWithDescriptorsProps, DetectFacesWithLandmarksWithDescriptorsState>(detectFacesWithLandmarksWithDescriptors)\n\n\n\n// WEBPACK FOOTER //\n// ./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\nimport { BoxWithText } from 'face-api.js';\nimport { DisplayResults, ReactElement } from '../../face-api.js-react';\nimport { MediaElement } from '../../face-api.js-react/MediaElement';\n\n\nexport interface DisplayMatchesProps {\n  fullFaceDescriptions: faceapi.FullFaceDescription[]\n  input: MediaElement\n  overlay: HTMLCanvasElement\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\n  withScore?: boolean\n  drawLandmarks?: boolean\n  children?: () => ReactElement\n}\n\nexport const DisplayMatches = (props: DisplayMatchesProps): any => {\n\n  const { input, fullFaceDescriptions, overlay, withScore, getBestMatch } = props\n\n  const boxesWithText = fullFaceDescriptions\n    .map(fd => fd.forSize(overlay.width, overlay.height))\n    .map(fd => {\n      const bestMatch = getBestMatch(fd.descriptor)\n      const text = `${bestMatch.distance < 0.6 ? bestMatch.label : 'unknown'} (${faceapi.round(bestMatch.distance)})`\n      return new BoxWithText(fd.detection.box, text)\n    })\n\n  return (\n    <DisplayResults\n      input={input}\n      results={boxesWithText}\n      overlay={overlay}\n      displayResultsOptions={{ withScore }}\n    >\n      { props.children }\n    </DisplayResults>\n  )\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/DisplayMatches.tsx","import * as faceapi from 'face-api.js';\nimport { TinyFaceDetectorOptions, BoxWithText } from 'face-api.js';\nimport { LoadModels } from 'face-api.js-react';\nimport { DisplayResults } from 'face-api.js-react/components/DisplayResults';\nimport * as React from 'react';\n\nimport {\n  DetectFacesWithLandmarksWithDescriptors,\n} from '../../face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors';\nimport { MediaElement } from '../../face-api.js-react/MediaElement';\nimport { DisplayMatches } from '../components/DisplayMatches';\nimport { ModalLoader } from '../components/ModalLoader';\nimport { SelectableImage, SelectionTypes } from '../components/SelectableImage';\nimport { EXAMPLE_IMAGES, FACE_DETECTORS, getFaceDetectionModelUri, MODELS_URI } from '../const';\nimport { SelectFaceDetector } from '../facc/SelectFaceDetector';\nimport { Root } from '../Root';\n\ntype PageState = {\n  input1?: MediaElement\n  overlay1?: HTMLCanvasElement\n  input2?: MediaElement\n  overlay2?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, PageState> {\n\n  state: PageState = {\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[0].url}\n          onLoaded={({ img : input1, overlay: overlay1 }) => this.setState({ input1, overlay1 })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 500 }}\n          imgId=\"img1\"\n        />\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[3].url}\n          onLoaded={({ img: input2, overlay: overlay2 }) => this.setState({ input2, overlay2 })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 500 }}\n          imgId=\"img2\"\n        />\n        <LoadModels\n          faceLandmarkModelUrl={MODELS_URI}\n          faceRecognitionModelUrl={MODELS_URI}\n          renderBusyComponent={() => <ModalLoader title={`Loading Models`} />}\n        >\n        {() =>\n          <SelectFaceDetector\n            initialFaceDetector={FACE_DETECTORS[0]}\n            initialTinyFaceDetectorOptions={new TinyFaceDetectorOptions({ inputSize: 512 })}\n          >\n          {(detectorName, detectionOptions, renderFaceDetectorSelection, renderFaceDetectorControls) =>\n            <LoadModels\n              {...getFaceDetectionModelUri(detectorName, MODELS_URI)}\n              renderBusyComponent={() => <ModalLoader title={`Loading ${detectorName} Model`} />}\n            >\n            {() =>\n              <div>\n                { renderFaceDetectorSelection() }\n                { renderFaceDetectorControls() }\n                <DetectFacesWithLandmarksWithDescriptors\n                  input={this.state.input1}\n                  detectionOptions={detectionOptions}\n                >\n                {({ fullFaceDescriptions: results1 }) => {\n                  const faceMatcher = new faceapi.FaceMatcher(results1)\n                  const { overlay1 } = this.state\n\n                  return (\n                    <DetectFacesWithLandmarksWithDescriptors\n                      input={this.state.input2}\n                      detectionOptions={detectionOptions}\n                    >\n                    {({ fullFaceDescriptions: results2 }) =>\n                      <span>\n                        <DisplayResults\n                          input={this.state.input1}\n                          overlay={overlay1}\n                          results={\n                            faceMatcher.labeledDescriptors.map((ld, idx) =>\n                              new BoxWithText(\n                                results1[idx].detection.forSize(overlay1.width, overlay1.height).box,\n                                ld.label\n                              )\n                            )\n                          }\n                        />\n                        <DisplayMatches\n                          input={this.state.input2}\n                          fullFaceDescriptions={results2}\n                          overlay={this.state.overlay2}\n                          getBestMatch={(desc) => faceMatcher.findBestMatch(desc)}\n                          withScore\n                        />\n                      </span>\n                    }\n                    </DetectFacesWithLandmarksWithDescriptors>\n                  )\n                }}\n                </DetectFacesWithLandmarksWithDescriptors>\n              </div>\n            }\n            </LoadModels>\n          }\n          </SelectFaceDetector>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/face_recognition.tsx"],"sourceRoot":""}