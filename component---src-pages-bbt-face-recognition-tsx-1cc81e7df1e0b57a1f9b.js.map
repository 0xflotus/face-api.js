{"version":3,"sources":["webpack:///./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","webpack:///./src/components/DisplayMatches.tsx","webpack:///./src/facc/ComputeRefDescriptors.tsx","webpack:///./src/pages/bbt_face_recognition.tsx"],"names":[],"mappings":"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","file":"component---src-pages-bbt-face-recognition-tsx-1cc81e7df1e0b57a1f9b.js","sourcesContent":["import * as faceapi from 'face-api.js';\n\nimport { withAsyncRendering } from '../hoc/withAsyncRendering';\nimport { MediaElement } from '../MediaElement';\nimport { FullFaceDescription, FaceDetectionOptions } from 'face-api.js';\n\nexport interface DetectFacesWithLandmarksWithDescriptorsProps {\n  detectionOptions: FaceDetectionOptions\n  input?: MediaElement\n}\n\nexport interface DetectFacesWithLandmarksWithDescriptorsState {\n  fullFaceDescriptions?: FullFaceDescription[]\n}\n\nasync function detectFacesWithLandmarksWithDescriptors(props: DetectFacesWithLandmarksWithDescriptorsProps) {\n\n  if (!props.input) {\n    return null\n  }\n\n  return {\n    fullFaceDescriptions: await faceapi.detectAllFaces(props.input.element, props.detectionOptions).withFaceLandmarks().withFaceDescriptors()\n  }\n}\n\nexport const DetectFacesWithLandmarksWithDescriptors =\n  withAsyncRendering<DetectFacesWithLandmarksWithDescriptorsProps, DetectFacesWithLandmarksWithDescriptorsState>(detectFacesWithLandmarksWithDescriptors)\n\n\n\n// WEBPACK FOOTER //\n// ./face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors.tsx","import * as faceapi from 'face-api.js';\nimport * as React from 'react';\n\nimport { BestMatch } from '../facc/ComputeRefDescriptors';\nimport { BoxWithText } from 'face-api.js';\nimport { DisplayResults, ReactElement } from '../../face-api.js-react';\n\n\nexport interface DisplayMatchesProps {\n  fullFaceDescriptions: faceapi.FullFaceDescription[]\n  overlay: HTMLCanvasElement\n  getBestMatch: (queryDescriptor: Float32Array) => BestMatch\n  withScore?: boolean\n  drawLandmarks?: boolean\n  children?: () => ReactElement\n}\n\nexport const DisplayMatches = (props: DisplayMatchesProps): any => {\n\n  const { fullFaceDescriptions, overlay, withScore, getBestMatch } = props\n\n  const boxesWithText = fullFaceDescriptions\n    .map(fd => fd.forSize(overlay.width, overlay.height))\n    .map(fd => {\n      const bestMatch = getBestMatch(fd.descriptor)\n      const text = `${bestMatch.distance < 0.6 ? bestMatch.label : 'unknown'} (${faceapi.round(bestMatch.distance)})`\n      return new BoxWithText(fd.detection.box, text)\n    })\n\n  return (\n    <DisplayResults\n      results={boxesWithText}\n      overlay={overlay}\n      displayResultsOptions={{ withScore }}\n    >\n      { props.children }\n    </DisplayResults>\n  )\n}\n\n\n// WEBPACK FOOTER //\n// ./src/components/DisplayMatches.tsx","import * as faceapi from 'face-api.js';\nimport { withAsyncRendering } from 'face-api.js-react';\n\nexport type RefDescriptor = {\n  label: string,\n  descriptor: Float32Array\n}\n\nexport type BestMatch = {\n  label: string,\n  distance: number\n}\n\nexport interface ComputeRefDescriptorsProps {\n  refDataSources: {\n    label: string,\n    url: string\n  }[]\n}\n\nexport interface ComputeRefDescriptorsState {\n  refDescriptors?: RefDescriptor[]\n  getBestMatch?: (queryDescriptor: Float32Array) => BestMatch\n}\n\nasync function initRefDescriptors(props: ComputeRefDescriptorsProps) {\n  const refDescriptors = await Promise.all(\n    props.refDataSources.map(async ({ label, url }) => {\n      const img = await faceapi.bufferToImage(await (await fetch(url)).blob())\n      const descriptor = await faceapi.nets.faceRecognitionNet.computeFaceDescriptor(img) as Float32Array\n      return {\n        label: label.replace('1.png', ''),\n        descriptor\n      }\n    })\n  )\n\n  const getBestMatch = (queryDescriptor: Float32Array) =>\n    refDescriptors.map(ref => ({\n      label: ref.label,\n      distance: faceapi.euclideanDistance(ref.descriptor, queryDescriptor)\n    }))\n      .reduce((best, curr) => curr.distance < best.distance ? curr : best)\n\n  return {\n    refDescriptors,\n    getBestMatch\n  }\n}\n\nexport const ComputeRefDescriptors = \n  withAsyncRendering<ComputeRefDescriptorsProps, ComputeRefDescriptorsState>(initRefDescriptors)\n\n\n\n// WEBPACK FOOTER //\n// ./src/facc/ComputeRefDescriptors.tsx","import { TinyFaceDetectorOptions } from 'face-api.js';\nimport { LoadModels, MediaElement } from 'face-api.js-react';\nimport * as React from 'react';\n\nimport {\n  DetectFacesWithLandmarksWithDescriptors,\n} from '../../face-api.js-react/facc/DetectFacesWithLandmarksWithDescriptors';\nimport { DisplayMatches } from '../components/DisplayMatches';\nimport { ModalLoader } from '../components/ModalLoader';\nimport { SelectableImage, SelectionTypes } from '../components/SelectableImage';\nimport {\n  ALIGNED_FACE_IMAGES_BY_CLASS,\n  EXAMPLE_IMAGES,\n  FACE_DETECTORS,\n  getFaceDetectionModelUri,\n  MODELS_URI,\n} from '../const';\nimport { ComputeRefDescriptors } from '../facc/ComputeRefDescriptors';\nimport { SelectFaceDetector } from '../facc/SelectFaceDetector';\nimport { Root } from '../Root';\n\nconst REF_DATA_SOURCES = ALIGNED_FACE_IMAGES_BY_CLASS.map(srcsByClass => srcsByClass[0])\n\ntype PageState = {\n  inputImg?: MediaElement\n  overlay?: HTMLCanvasElement\n}\n\nexport default class extends React.Component<{}, PageState> {\n\n  state: PageState = {\n  }\n\n  onTabIndexChanged = () => {\n    this.setState({ inputImg: undefined })\n  }\n\n  public render() {\n    if (!(typeof window !== 'undefined' && window.document) ){\n      return null\n    }\n\n    return(\n      <Root>\n        <SelectableImage\n          items={EXAMPLE_IMAGES}\n          initialImageSrc={EXAMPLE_IMAGES[0].url}\n          onLoaded={({ img: inputImg, overlay }) => this.setState({ inputImg, overlay })}\n          selectionType={SelectionTypes.BOTH}\n          imageStyle={{ maxWidth: 800 }}\n          imgId=\"img\"\n        />\n        <LoadModels\n          faceLandmarkModelUrl={MODELS_URI}\n          faceRecognitionModelUrl={MODELS_URI}\n          renderBusyComponent={() => <ModalLoader title={`Loading Models`} />}\n        >\n        {() =>\n          <ComputeRefDescriptors\n            refDataSources={REF_DATA_SOURCES}\n            renderBusyComponent={\n              () => <ModalLoader title=\"Computing Reference Descriptors\"/>\n            }\n          >\n          {({ getBestMatch }) =>\n            <SelectFaceDetector\n              initialFaceDetector={FACE_DETECTORS[0]}\n              initialTinyFaceDetectorOptions={new TinyFaceDetectorOptions({ inputSize: 512 })}\n            >\n            {(detectorName, detectionOptions, renderFaceDetectorSelection, renderFaceDetectorControls) =>\n              <LoadModels\n                {...getFaceDetectionModelUri(detectorName, MODELS_URI)}\n                renderBusyComponent={() => <ModalLoader title={`Loading ${detectorName} Model`} />}\n              >\n              {() =>\n                <div>\n                  { renderFaceDetectorSelection() }\n                  { renderFaceDetectorControls() }\n                  <DetectFacesWithLandmarksWithDescriptors\n                    input={this.state.inputImg}\n                    detectionOptions={detectionOptions}\n                  >\n                  {({ fullFaceDescriptions }) =>\n                    <DisplayMatches\n                      fullFaceDescriptions={fullFaceDescriptions}\n                      overlay={this.state.overlay}\n                      getBestMatch={getBestMatch}\n                      withScore\n                    />\n                  }\n                  </DetectFacesWithLandmarksWithDescriptors>\n                </div>\n              }\n              </LoadModels>\n            }\n            </SelectFaceDetector>\n          }\n          </ComputeRefDescriptors>\n        }\n        </LoadModels>\n      </Root>\n    )\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/bbt_face_recognition.tsx"],"sourceRoot":""}